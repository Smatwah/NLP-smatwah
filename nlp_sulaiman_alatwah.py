# -*- coding: utf-8 -*-
"""NLP SULAIMAN ALATWAH.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kVdgztPj6yAa8vRK-8buCKv3iOn4VOMo
"""

!pip install -q transformers arabert pytorch-lightning
!pip install -U transformers

import pandas as pd
import os
import torch
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from torch.utils.data import Dataset, DataLoader
from transformers import AutoTokenizer, AutoModelForSequenceClassification, Trainer, TrainingArguments

file_path = '/content/commercial_names_2018.csv'
df = pd.read_csv(file_path)
df = df[['Commercial_Name', 'Activity_Label']].dropna()
df.head(10)

le = LabelEncoder()
df['label'] = le.fit_transform(df['Activity_Label'])

train_texts, val_texts, train_labels, val_labels = train_test_split(
    df['Commercial_Name'].tolist(),
    df['label'].tolist(),
    test_size=0.2,
    random_state=42,
    stratify=df['label']
)

tokenizer = AutoTokenizer.from_pretrained("aubmindlab/bert-base-arabertv02", use_fast=False)

def tokenize_texts(texts):
    return tokenizer(texts, padding=True, truncation=True, max_length=64, return_tensors="pt")

train_encodings = tokenize_texts(train_texts)
val_encodings = tokenize_texts(val_texts)

class CRDataset(Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: val[idx] for key, val in self.encodings.items()}
        item['labels'] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

train_dataset = CRDataset(train_encodings, train_labels)
val_dataset = CRDataset(val_encodings, val_labels)

num_labels = len(set(train_labels))
model = AutoModelForSequenceClassification.from_pretrained(
    "aubmindlab/bert-base-arabertv02",
    num_labels=num_labels
)

from transformers import TrainingArguments

training_args = TrainingArguments(
    output_dir="./results",
    num_train_epochs=1,
    per_device_train_batch_size=16,
    per_device_eval_batch_size=16,
    logging_dir="./logs",
    report_to=[]
)

from sklearn.metrics import accuracy_score

def compute_metrics(eval_pred):
    logits, labels = eval_pred
    preds = logits.argmax(axis=1)
    acc = accuracy_score(labels, preds)
    return {"accuracy": acc}
    import os
os.environ["WANDB_DISABLED"] = "true"
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset,
    compute_metrics=compute_metrics
)

trainer.train()

model.save_pretrained("./arabert_cr_model")
tokenizer.save_pretrained("./arabert_cr_model")

import pickle
with open("label_encoder.pkl", "wb") as f:
    pickle.dump(le, f)

!pip install gradio

# Artistic Gradio App Design ‚Äì Elegant Colors & Creative Layout
import gradio as gr
import torch
import pickle
from transformers import AutoTokenizer, AutoModelForSequenceClassification
import matplotlib.pyplot as plt
import numpy as np

# Load model, tokenizer, and label encoder
model = AutoModelForSequenceClassification.from_pretrained("./arabert_cr_model")
tokenizer = AutoTokenizer.from_pretrained("./arabert_cr_model")
with open("label_encoder.pkl", "rb") as f:
    le = pickle.load(f)

# Prediction function
def predict_activity(text):
    inputs = tokenizer(text, return_tensors="pt", padding=True, truncation=True, max_length=64)
    with torch.no_grad():
        outputs = model(**inputs)
        pred = outputs.logits.argmax(dim=1).item()
        label = le.inverse_transform([pred])[0]
    return label

# Static Accuracy Plot
def plot_accuracy():
    fig, ax = plt.subplots(figsize=(4, 4))
    ax.bar(["Accuracy"], [0.9980], color="#6C5CE7")
    ax.set_ylim(0.95, 1.01)
    ax.set_title("Model Accuracy", fontsize=14, fontweight='bold', color="#6C5CE7")
    for i, v in enumerate([0.9980]):
        ax.text(i, v + 0.001, f"{v:.4f}", ha='center', fontweight='bold', color="#00b894")
    return fig

# Custom CSS for colorful and elegant UI
custom_css = """
body {
    background: linear-gradient(135deg, #fdfcfb, #e2d1c3);
    font-family: 'Poppins', sans-serif;
}
.gr-button {
    background: linear-gradient(45deg, #6C5CE7, #00b894);
    color: white !important;
    border-radius: 15px;
    font-size: 16px;
    padding: 14px 24px;
    transition: all 0.4s ease-in-out;
    box-shadow: 0 4px 15px rgba(0,0,0,0.2);
    border: none;
}
.gr-button:hover {
    transform: scale(1.05);
    background: linear-gradient(45deg, #00b894, #6C5CE7);
    box-shadow: 0 6px 20px rgba(0,0,0,0.3);
}
.card {
    background-color: #ffffffdd;
    border-radius: 20px;
    padding: 30px;
    margin: 10px;
    box-shadow: 0 8px 20px rgba(0,0,0,0.1);
    transition: 0.3s ease-in-out;
}
.card:hover {
    box-shadow: 0 12px 24px rgba(0,0,0,0.2);
    transform: translateY(-4px);
}
"""

# Gradio app with artistic layout
with gr.Blocks(css=custom_css, theme=gr.themes.Default()) as demo:
    gr.Markdown("""
    <div class="card">
    <h1 style="color:#6C5CE7;">Business Name Classifier</h1>
    <p style="font-size:16px; color:#2d3436;">
    Discover what category your commercial name belongs to using our AI-powered Arabic BERT classifier.
    </p>
    </div>
    """)

    with gr.Row():
        btn_try = gr.Button("üöÄ Try the App")
        btn_acc = gr.Button("üìä Show Accuracy")

    with gr.Row(visible=False) as page_try:
        gr.Markdown("<div class='card'><h2 style='color:#00b894;'>Try the App</h2></div>")
        input_text = gr.Textbox(label="Business Name", placeholder="e.g., Al Riyadh Restaurant")
        output_text = gr.Textbox(label="Predicted Category")
        btn_submit = gr.Button("Predict")
        back_btn_1 = gr.Button("‚¨ÖÔ∏è Back")
        btn_submit.click(fn=predict_activity, inputs=input_text, outputs=output_text)

    with gr.Row(visible=False) as page_acc:
        gr.Markdown("<div class='card'><h2 style='color:#6C5CE7;'>üìä Model Accuracy</h2></div>")
        acc_plot = gr.Plot()
        btn_show_acc = gr.Button("Show Accuracy Plot")
        back_btn_2 = gr.Button("‚¨ÖÔ∏è Back")
        btn_show_acc.click(fn=plot_accuracy, outputs=acc_plot)

    # Toggle visibility
    def go_to_try(): return gr.update(visible=True), gr.update(visible=False), gr.update(visible=False)
    def go_to_acc(): return gr.update(visible=False), gr.update(visible=True), gr.update(visible=False)
    def go_home(): return gr.update(visible=False), gr.update(visible=False), gr.update(visible=True)

    hidden_home = gr.Row(visible=True)
    btn_try.click(go_to_try, outputs=[page_try, page_acc, hidden_home])
    btn_acc.click(go_to_acc, outputs=[page_try, page_acc, hidden_home])
    back_btn_1.click(go_home, outputs=[page_try, page_acc, hidden_home])
    back_btn_2.click(go_home, outputs=[page_try, page_acc, hidden_home])

# Launch
if __name__ == "__main__":
    demo.launch()

from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
import numpy as np

val_inputs = tokenizer(val_texts, return_tensors="pt", padding=True, truncation=True, max_length=64)
val_dataset_encodings = CRDataset(val_inputs, val_labels)

preds_output = trainer.predict(val_dataset_encodings)
y_preds = np.argmax(preds_output.predictions, axis=1)
y_true = preds_output.label_ids

acc = accuracy_score(y_true, y_preds)
print(f"‚úÖ Accuracy: {acc:.4f}")

labels = le.classes_
cm = confusion_matrix(y_true, y_preds)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels)
plt.figure(figsize=(10, 8))
disp.plot(xticks_rotation=45)
plt.title("Confusion Matrix")
plt.show()